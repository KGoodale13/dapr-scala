// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.dapr

@SerialVersionUID(0L)
final case class SaveStateEnvelope(
    requests: _root_.scala.Seq[io.dapr.StateRequest] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[SaveStateEnvelope] with scalapb.lenses.Updatable[SaveStateEnvelope] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      requests.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      requests.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.dapr.SaveStateEnvelope = {
      val __requests = (_root_.scala.collection.immutable.Vector.newBuilder[io.dapr.StateRequest] ++= this.requests)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __requests += _root_.scalapb.LiteParser.readMessage(_input__, io.dapr.StateRequest.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      io.dapr.SaveStateEnvelope(
          requests = __requests.result()
      )
    }
    def clearRequests = copy(requests = _root_.scala.Seq.empty)
    def addRequests(__vs: io.dapr.StateRequest*): SaveStateEnvelope = addAllRequests(__vs)
    def addAllRequests(__vs: Iterable[io.dapr.StateRequest]): SaveStateEnvelope = copy(requests = requests ++ __vs)
    def withRequests(__v: _root_.scala.Seq[io.dapr.StateRequest]): SaveStateEnvelope = copy(requests = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => requests
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(requests.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.dapr.SaveStateEnvelope
}

object SaveStateEnvelope extends scalapb.GeneratedMessageCompanion[io.dapr.SaveStateEnvelope] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.dapr.SaveStateEnvelope] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.dapr.SaveStateEnvelope = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.dapr.SaveStateEnvelope(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[io.dapr.StateRequest]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.dapr.SaveStateEnvelope] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.dapr.SaveStateEnvelope(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[io.dapr.StateRequest]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DaprProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DaprProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.dapr.StateRequest
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.dapr.SaveStateEnvelope(
    requests = _root_.scala.Seq.empty
  )
  implicit class SaveStateEnvelopeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.dapr.SaveStateEnvelope]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.dapr.SaveStateEnvelope](_l) {
    def requests: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.dapr.StateRequest]] = field(_.requests)((c_, f_) => c_.copy(requests = f_))
  }
  final val REQUESTS_FIELD_NUMBER = 1
  def of(
    requests: _root_.scala.Seq[io.dapr.StateRequest]
  ): _root_.io.dapr.SaveStateEnvelope = _root_.io.dapr.SaveStateEnvelope(
    requests
  )
}
