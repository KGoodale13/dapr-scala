// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.dapr

@SerialVersionUID(0L)
final case class StateRequestOptions(
    concurrency: _root_.scala.Predef.String = "",
    consistency: _root_.scala.Predef.String = "",
    retryPolicy: _root_.scala.Option[io.dapr.StateRetryPolicy] = _root_.scala.None
    ) extends scalapb.GeneratedMessage with scalapb.Message[StateRequestOptions] with scalapb.lenses.Updatable[StateRequestOptions] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = concurrency
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = consistency
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      if (retryPolicy.isDefined) {
        val __value = retryPolicy.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = concurrency
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = consistency
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      retryPolicy.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.dapr.StateRequestOptions = {
      var __concurrency = this.concurrency
      var __consistency = this.consistency
      var __retryPolicy = this.retryPolicy
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __concurrency = _input__.readString()
          case 18 =>
            __consistency = _input__.readString()
          case 26 =>
            __retryPolicy = Option(_root_.scalapb.LiteParser.readMessage(_input__, __retryPolicy.getOrElse(io.dapr.StateRetryPolicy.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      io.dapr.StateRequestOptions(
          concurrency = __concurrency,
          consistency = __consistency,
          retryPolicy = __retryPolicy
      )
    }
    def withConcurrency(__v: _root_.scala.Predef.String): StateRequestOptions = copy(concurrency = __v)
    def withConsistency(__v: _root_.scala.Predef.String): StateRequestOptions = copy(consistency = __v)
    def getRetryPolicy: io.dapr.StateRetryPolicy = retryPolicy.getOrElse(io.dapr.StateRetryPolicy.defaultInstance)
    def clearRetryPolicy: StateRequestOptions = copy(retryPolicy = _root_.scala.None)
    def withRetryPolicy(__v: io.dapr.StateRetryPolicy): StateRequestOptions = copy(retryPolicy = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = concurrency
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = consistency
          if (__t != "") __t else null
        }
        case 3 => retryPolicy.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(concurrency)
        case 2 => _root_.scalapb.descriptors.PString(consistency)
        case 3 => retryPolicy.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.dapr.StateRequestOptions
}

object StateRequestOptions extends scalapb.GeneratedMessageCompanion[io.dapr.StateRequestOptions] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.dapr.StateRequestOptions] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.dapr.StateRequestOptions = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.dapr.StateRequestOptions(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[io.dapr.StateRetryPolicy]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.dapr.StateRequestOptions] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.dapr.StateRequestOptions(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.dapr.StateRetryPolicy]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DaprProto.javaDescriptor.getMessageTypes.get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DaprProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = io.dapr.StateRetryPolicy
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.dapr.StateRequestOptions(
    concurrency = "",
    consistency = "",
    retryPolicy = _root_.scala.None
  )
  implicit class StateRequestOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.dapr.StateRequestOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.dapr.StateRequestOptions](_l) {
    def concurrency: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.concurrency)((c_, f_) => c_.copy(concurrency = f_))
    def consistency: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.consistency)((c_, f_) => c_.copy(consistency = f_))
    def retryPolicy: _root_.scalapb.lenses.Lens[UpperPB, io.dapr.StateRetryPolicy] = field(_.getRetryPolicy)((c_, f_) => c_.copy(retryPolicy = Option(f_)))
    def optionalRetryPolicy: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.dapr.StateRetryPolicy]] = field(_.retryPolicy)((c_, f_) => c_.copy(retryPolicy = f_))
  }
  final val CONCURRENCY_FIELD_NUMBER = 1
  final val CONSISTENCY_FIELD_NUMBER = 2
  final val RETRYPOLICY_FIELD_NUMBER = 3
  def of(
    concurrency: _root_.scala.Predef.String,
    consistency: _root_.scala.Predef.String,
    retryPolicy: _root_.scala.Option[io.dapr.StateRetryPolicy]
  ): _root_.io.dapr.StateRequestOptions = _root_.io.dapr.StateRequestOptions(
    concurrency,
    consistency,
    retryPolicy
  )
}
