// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.dapr

@SerialVersionUID(0L)
final case class DeleteStateEnvelope(
    key: _root_.scala.Predef.String = "",
    etag: _root_.scala.Predef.String = "",
    options: _root_.scala.Option[io.dapr.StateOptions] = _root_.scala.None
    ) extends scalapb.GeneratedMessage with scalapb.Message[DeleteStateEnvelope] with scalapb.lenses.Updatable[DeleteStateEnvelope] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = key
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = etag
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      if (options.isDefined) {
        val __value = options.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = key
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = etag
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      options.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.dapr.DeleteStateEnvelope = {
      var __key = this.key
      var __etag = this.etag
      var __options = this.options
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readString()
          case 18 =>
            __etag = _input__.readString()
          case 26 =>
            __options = Option(_root_.scalapb.LiteParser.readMessage(_input__, __options.getOrElse(io.dapr.StateOptions.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      io.dapr.DeleteStateEnvelope(
          key = __key,
          etag = __etag,
          options = __options
      )
    }
    def withKey(__v: _root_.scala.Predef.String): DeleteStateEnvelope = copy(key = __v)
    def withEtag(__v: _root_.scala.Predef.String): DeleteStateEnvelope = copy(etag = __v)
    def getOptions: io.dapr.StateOptions = options.getOrElse(io.dapr.StateOptions.defaultInstance)
    def clearOptions: DeleteStateEnvelope = copy(options = _root_.scala.None)
    def withOptions(__v: io.dapr.StateOptions): DeleteStateEnvelope = copy(options = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = key
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = etag
          if (__t != "") __t else null
        }
        case 3 => options.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(key)
        case 2 => _root_.scalapb.descriptors.PString(etag)
        case 3 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.dapr.DeleteStateEnvelope
}

object DeleteStateEnvelope extends scalapb.GeneratedMessageCompanion[io.dapr.DeleteStateEnvelope] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.dapr.DeleteStateEnvelope] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.dapr.DeleteStateEnvelope = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.dapr.DeleteStateEnvelope(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[io.dapr.StateOptions]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.dapr.DeleteStateEnvelope] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.dapr.DeleteStateEnvelope(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.dapr.StateOptions]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DaprProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DaprProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = io.dapr.StateOptions
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.dapr.DeleteStateEnvelope(
    key = "",
    etag = "",
    options = _root_.scala.None
  )
  implicit class DeleteStateEnvelopeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.dapr.DeleteStateEnvelope]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.dapr.DeleteStateEnvelope](_l) {
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def etag: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.etag)((c_, f_) => c_.copy(etag = f_))
    def options: _root_.scalapb.lenses.Lens[UpperPB, io.dapr.StateOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = Option(f_)))
    def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.dapr.StateOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
  }
  final val KEY_FIELD_NUMBER = 1
  final val ETAG_FIELD_NUMBER = 2
  final val OPTIONS_FIELD_NUMBER = 3
  def of(
    key: _root_.scala.Predef.String,
    etag: _root_.scala.Predef.String,
    options: _root_.scala.Option[io.dapr.StateOptions]
  ): _root_.io.dapr.DeleteStateEnvelope = _root_.io.dapr.DeleteStateEnvelope(
    key,
    etag,
    options
  )
}
