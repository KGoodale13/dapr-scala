// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.dapr

@SerialVersionUID(0L)
final case class StateRetryPolicy(
    threshold: _root_.scala.Int = 0,
    pattern: _root_.scala.Predef.String = "",
    interval: _root_.scala.Option[com.google.protobuf.duration.Duration] = _root_.scala.None
    ) extends scalapb.GeneratedMessage with scalapb.Message[StateRetryPolicy] with scalapb.lenses.Updatable[StateRetryPolicy] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = threshold
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = pattern
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      if (interval.isDefined) {
        val __value = interval.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = threshold
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = pattern
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      interval.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.dapr.StateRetryPolicy = {
      var __threshold = this.threshold
      var __pattern = this.pattern
      var __interval = this.interval
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __threshold = _input__.readInt32()
          case 18 =>
            __pattern = _input__.readString()
          case 26 =>
            __interval = Option(_root_.scalapb.LiteParser.readMessage(_input__, __interval.getOrElse(com.google.protobuf.duration.Duration.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      io.dapr.StateRetryPolicy(
          threshold = __threshold,
          pattern = __pattern,
          interval = __interval
      )
    }
    def withThreshold(__v: _root_.scala.Int): StateRetryPolicy = copy(threshold = __v)
    def withPattern(__v: _root_.scala.Predef.String): StateRetryPolicy = copy(pattern = __v)
    def getInterval: com.google.protobuf.duration.Duration = interval.getOrElse(com.google.protobuf.duration.Duration.defaultInstance)
    def clearInterval: StateRetryPolicy = copy(interval = _root_.scala.None)
    def withInterval(__v: com.google.protobuf.duration.Duration): StateRetryPolicy = copy(interval = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = threshold
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = pattern
          if (__t != "") __t else null
        }
        case 3 => interval.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(threshold)
        case 2 => _root_.scalapb.descriptors.PString(pattern)
        case 3 => interval.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.dapr.StateRetryPolicy
}

object StateRetryPolicy extends scalapb.GeneratedMessageCompanion[io.dapr.StateRetryPolicy] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.dapr.StateRetryPolicy] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.dapr.StateRetryPolicy = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.dapr.StateRetryPolicy(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[com.google.protobuf.duration.Duration]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.dapr.StateRetryPolicy] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.dapr.StateRetryPolicy(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.duration.Duration]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DaprProto.javaDescriptor.getMessageTypes.get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DaprProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = com.google.protobuf.duration.Duration
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.dapr.StateRetryPolicy(
    threshold = 0,
    pattern = "",
    interval = _root_.scala.None
  )
  implicit class StateRetryPolicyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.dapr.StateRetryPolicy]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.dapr.StateRetryPolicy](_l) {
    def threshold: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.threshold)((c_, f_) => c_.copy(threshold = f_))
    def pattern: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.pattern)((c_, f_) => c_.copy(pattern = f_))
    def interval: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.duration.Duration] = field(_.getInterval)((c_, f_) => c_.copy(interval = Option(f_)))
    def optionalInterval: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.duration.Duration]] = field(_.interval)((c_, f_) => c_.copy(interval = f_))
  }
  final val THRESHOLD_FIELD_NUMBER = 1
  final val PATTERN_FIELD_NUMBER = 2
  final val INTERVAL_FIELD_NUMBER = 3
  def of(
    threshold: _root_.scala.Int,
    pattern: _root_.scala.Predef.String,
    interval: _root_.scala.Option[com.google.protobuf.duration.Duration]
  ): _root_.io.dapr.StateRetryPolicy = _root_.io.dapr.StateRetryPolicy(
    threshold,
    pattern,
    interval
  )
}
